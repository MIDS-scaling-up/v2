FROM w251/cuda:dev-tx2-4.2_b158

# to run this in interactive mode, try
# docker run --rm --privileged -v /tmp:/tmp -v /var:/var -v /home/nvidia/models:/models --net=host --ipc=host --env DISPLAY=$DISPLAY -ti w251/inf:tx2-3.3_b39 bash
# Try the frame classification demo:
# ./imagenet-camera
# Try the object detection demo:
# ./detectnet-camera
# Try the segmentation demo:
# ./segnet-camera

RUN apt update
RUN apt install -y git cmake wget gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-base
WORKDIR /tmp
# RUN rm *.deb
ARG URL=http://169.44.201.108:7002/jetpacks/4.2

RUN wget $URL/libopencv_3.3.1-2-g31ccdfe11_arm64.deb
RUN wget $URL/libopencv-samples_3.3.1-2-g31ccdfe11_arm64.deb
RUN wget $URL/libopencv-python_3.3.1-2-g31ccdfe11_arm64.deb
RUN wget $URL/libopencv-dev_3.3.1-2-g31ccdfe11_arm64.deb

# RUN wget $URL/libopencv_3.3.1_t186_arm64.deb
# RUN wget $URL/libopencv-dev_3.3.1_t186_arm64.deb
# RUN wget $URL/libopencv-python_3.3.1_t186_arm64.deb
# RUN wget $URL/libopencv-samples_3.3.1_t186_arm64.deb

# RUN wget $URL/libnvinfer4_4.1.3-1+cuda9.0_arm64.deb
# RUN wget $URL/libnvinfer-dev_4.1.3-1+cuda9.0_arm64.deb
# RUN wget $URL/libnvinfer-samples_4.1.3-1+cuda9.0_arm64.deb

RUN wget $URL/libnvinfer-dev_5.0.6-1+cuda10.0_arm64.deb
RUN wget $URL/libnvinfer-samples_5.0.6-1+cuda10.0_all.deb
RUN wget $URL/libnvinfer5_5.0.6-1+cuda10.0_arm64.deb

RUN apt install -y /tmp/*.deb
RUN rm *.deb

RUN apt-get install -y libpython3-dev python3-pip

RUN apt install -y libblas-dev liblapack-dev
WORKDIR /tmp

RUN wget https://nvidia.box.com/shared/static/j2dn48btaxosqp0zremqqm8pjelriyvs.whl -O torch-1.1.0-cp36-cp36m-linux_aarch64.whl
RUN pip3 install numpy torch-1.1.0-cp36-cp36m-linux_aarch64.whl


# torch vision
# https://devtalk.nvidia.com/default/topic/1049071/jetson-nano/pytorch-for-jetson-nano/
RUN apt install -y libjpeg-dev zlib1g-dev
WORKDIR /tmp
RUN git clone -b v0.3.0 https://github.com/pytorch/vision torchvision
WORKDIR /tmp/torchvision
RUN python3 setup.py install

WORKDIR /
RUN git clone http://github.com/dusty-nv/jetson-inference
WORKDIR /jetson-inference
RUN git submodule update --init
RUN mkdir build
WORKDIR /jetson-inference/build

# Build

RUN cmake ../
RUN make -j6

RUN make install

WORKDIR /jetson-inference/build/aarch64/bin
